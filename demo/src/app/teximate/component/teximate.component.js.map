{"version":3,"sources":["../inlined/component/teximate.component.ts"],"names":[],"mappings":"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","file":"teximate.component.js","sourceRoot":"","sourcesContent":["import { Component, OnChanges, Input, Renderer2, ElementRef, SimpleChanges, ChangeDetectionStrategy, OnDestroy } from '@angular/core';\nimport { TeximateOptions, TeximateOrder } from '../helper/teximate.class';\n\nimport { TeximateService } from '../service/teximate.service';\n\n\nexport class TeximateComponent implements OnChanges, OnDestroy {\n\n  style: HTMLElement;\n\n  jobText: string = 'Teximate is working';\n\n  jobType: string = 'letter';\n\n  /** Default effect */\n  jobEffect: TeximateOptions = {\n    animation: { name: 'fadeIn', duration: 300 },\n    word: { type: TeximateOrder.SEQUENCE, delay: 100 },\n    letter: { type: TeximateOrder.SHUFFLE, delay: 50 }\n  };\n\n   text: string;\n\n   type: string;\n\n   effect;\n\n  // @Input() hoverEffect;\n\n  // @Input() clickEffect;\n\n  constructor(public teximate: TeximateService, private renderer: Renderer2, el: ElementRef) {\n\n    /** create dynamic style (to avoid applying css rules' vendors for each element in the template) */\n    this.style = this.renderer.createElement('style');\n    this.renderer.appendChild(el.nativeElement, this.style);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    // console.log(changes['type'])\n\n    let reloadText = changes['text'] && changes['text'].firstChange;\n\n    if (changes['text'] && changes['text'].currentValue) {\n\n      this.jobText = changes['text'].currentValue;\n      reloadText = true;\n    }\n\n    if (changes['type'] && changes['type'].currentValue) {\n\n      this.jobType = changes['type'].currentValue;\n    }\n\n    if (changes['effect']) {\n\n      this.jobEffect = Object.assign({}, this.jobEffect, changes['effect'].currentValue);\n      this.setAnimationDuration(changes['effect'].currentValue.animation.duration);\n    }\n\n    if (reloadText) {\n      this.teximate.run(this.jobText, this.jobEffect, this.jobType);\n    } else {\n      this.teximate.runEffect(this.jobEffect, this.jobType);\n    }\n  }\n\n  runEffect(options: TeximateOptions, type: string) {\n    /** Run effect to the existing text (should be used from component ref\n     * e.g. :\n     * ViewChild(TeximateComponent) tx;\n     * tx.runEffect(options);\n     * */\n    this.teximate.runEffect(options, type);\n  }\n\n  setAnimationDuration(duration) {\n    this.renderer.setProperty(this.style, 'innerHTML', `\n      .animated {\n        animation-duration: ${duration}ms;\n        -webkit-animation-duration: ${duration}ms;\n        -moz-animation-duration: ${duration}ms;\n        -o-animation-duration: ${duration}ms;\n        -ms-animation-duration: ${duration}ms;\n      }\n    `);\n  }\n\n  ngOnDestroy() {\n    this.teximate.text.unsubscribe();\n    this.teximate.worker.unsubscribe();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'teximate',\n  template: \"\\n    <span aria-label=\\\"text\\\">\\n\\n      <div *ngFor=\\\"let line of teximate.text | async\\\" [class]=\\\"'line' + line.class\\\" [style.visibility]=\\\"line.visibility\\\">\\n\\n        <span *ngFor=\\\"let word of line.words\\\" [class]=\\\"'word' + word.class + word.animateClass\\\" [style.visibility]=\\\"word.visibility\\\">\\n\\n          <span *ngFor=\\\"let letter of word.letters\\\" [class]=\\\"'letter' + letter.class + letter.animateClass\\\"\\n           [style.visibility]=\\\"letter.visibility\\\">\\n            {{letter.text}}\\n          </span>\\n\\n        </span>\\n      </div>\\n\\n    </span>\\n  \",\n  styles: [\"\\n    .word, .letter{\\n        display: inline-block;\\n        //  fix for poor ios performance \\n        transform: translate3d(0,0,0);\\n        -moz-transform: translate3d(0,0,0);\\n        -o-transform: translate3d(0,0,0);\\n        -webkit-transform: translate3d(0,0,0);\\n    }\\n    .word{ \\n        margin-right: 8px;\\n    }\\n  \"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [TeximateService]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TeximateService, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'text': [{ type: Input },],\n'type': [{ type: Input },],\n'effect': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}