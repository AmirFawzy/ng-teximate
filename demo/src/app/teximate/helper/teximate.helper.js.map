{"version":3,"sources":["../inlined/helper/teximate.helper.ts"],"names":[],"mappings":"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","file":"teximate.helper.js","sourceRoot":"","sourcesContent":["import {Line, Word, Letter, TeximateOrder} from './teximate.class';\n\nexport module Helper {\n\n  /** Shuffle Array */\n  export const shuffle = (array) => {\n    let m = array.length, t, i;\n    while (m) {\n      i = Math.floor(Math.random() * m--);\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n    return array;\n  };\n\n  /** Return 3d array from the text */\n  export const textFactory = (text): Line[] => {\n\n    const linesArr: Line[] = [];\n    /** get text's lines */\n    const lines = text.split('\\n');\n    lines.map((line, i) => {\n\n      const wordArr: Word[] = [];\n      /** get line's words and filter empty words */\n      const words = line.split(' ');\n      words.filter(word => word !== '').map((word, j) => {\n\n        const letterArr: Letter[] = [];\n        /** get word's letters */\n        const letters = word.split(/(?!$)/u);\n        letters.map((letter, k) => {\n\n          letterArr.push({\n            text: letter,\n            class: ' letter' + (k + 1),\n            visibility: 'hidden'\n          });\n        });\n\n        wordArr.push({\n          letters: letterArr,\n          class: ' word' + (j + 1),\n          visibility: 'hidden'\n        });\n      });\n\n      linesArr.push({\n        words: wordArr,\n        class: ' line' + (i + 1),\n        visibility: 'hidden'\n      });\n    });\n    return linesArr;\n  };\n\n\n  export const processWord = (options, arr, i, prevWordLength) => {\n\n    let index;\n    let delay;\n\n    switch (options.word.type) {\n      case TeximateOrder.SYNC:\n        index = i;\n        delay = 0;\n        break;\n      case TeximateOrder.REVERSE:\n        index = arr.length - i - 1;\n        delay = (prevWordLength * options.letter.delay) + (i * options.word.delay);\n        break;\n      default:\n        index = i;\n        delay = (prevWordLength * options.letter.delay) + (i * options.word.delay);\n    }\n    return {\n      letters: arr[index].letters,\n      delay: delay\n    };\n  };\n\n  export const processLetter = (options, arr, i) => {\n\n    let index;\n    let delay;\n\n    switch (options.letter.type) {\n      case TeximateOrder.SYNC:\n        index = i;\n        delay = 0;\n        break;\n      case TeximateOrder.REVERSE:\n        index = arr.length - i - 1;\n        delay = i * options.letter.delay;\n        break;\n      default:\n        index = i;\n        delay = i * options.letter.delay;\n    }\n\n    return {\n      item: arr[index],\n      delay: delay\n    };\n  };\n}\n\n\n/**\n *\n *\n return Observable.from(textArr)\n .mergeMap((line: any, i) => Observable.of(line.words).delay(i * this.lineInterval))\n .mergeAll()\n .mergeMap((word: any, i) => Observable.of(word.letters).delay(i * this.wordInterval))\n .mergeAll()\n .mergeMap((letter: any, i) => Observable.of(letter).delay(i * this.letterInterval))\n .do((item: Letter) => {\n        item.visibility = 'visible';\n        this.array.next(textArr);\n      })\n */\n"]}