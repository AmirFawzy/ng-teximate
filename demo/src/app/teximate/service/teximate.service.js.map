{"version":3,"sources":["../inlined/service/teximate.service.ts"],"names":[],"mappings":"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","file":"teximate.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/mergeAll';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/switchMap';\n\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/of';\n\nimport { Helper } from '../helper/teximate.helper';\nimport { TeximateOptions, TeximateOrder,Line, Word, Letter } from '../helper/teximate.class';\n\n/** This service is not meant to be used outside TeximateModule\n *  Each component instance has service instance\n */\n\nexport class TeximateService {\n\n  /** The text array coming from text factory */\n  arr: Line[] = [];\n  /** a worker to teximate the array */\n  worker = new Subject();\n  /** the teximated text to be displayed on the view */\n  text = new Subject();\n\n  constructor() {\n\n    this.worker.switchMap((job: any) => {\n      // console.log('worker execute:', job.type);\n\n      return (job.type === 'word') ?\n        this.wordsJob(job.textArr, job.options) :\n        this.lettersJob(job.textArr, job.options)\n\n    }).subscribe();\n  }\n\n  run(text: string, options: TeximateOptions, type: string) {\n\n    this.arr = Helper.textFactory(text);\n    this.worker.next({ textArr: this.arr, options: options, type: type });\n  }\n\n  runEffect(options: TeximateOptions, type: string) {\n    this.worker.next({ textArr: this.arr, options: options, type: type });\n  }\n\n  lettersJob(textArr, options: TeximateOptions): Observable<any> {\n\n    return Observable.from(textArr)\n      .mergeMap((line: any) => {\n\n        /** To calculate a word's delay */\n        let prevWordLength = 0;\n\n        return Observable.of(line.words)\n          .mergeAll()\n          .mergeMap((wordItem: Word, j) => {\n\n            /** Process word (calculate index & delay according to word's type) */\n            const word = Helper.processWord(options, line.words, j, prevWordLength);\n\n            /** To calculate next word's delay */\n            prevWordLength = prevWordLength + word.letters.length;\n\n            /** Shuffle word's letter if letter type is shuffle */\n            let wordLetters;\n            if (options.letter.type === TeximateOrder.SHUFFLE) {\n              wordLetters = Helper.shuffle(word.letters.slice());\n            } else {\n              wordLetters = word.letters;\n            }\n\n            return Observable.of(wordLetters).delay(word.delay)\n              .mergeAll()\n              .mergeMap((letterItem, k) => {\n\n                /** Process letter (calculate index & delay according to letter's type) */\n                const letter = Helper.processLetter(options, wordLetters, k);\n\n                return Observable.of(letter.item).delay(letter.delay)\n                  .do((letterItem: Letter) => {\n\n                    /** Apply changes to the letter then update the view */\n                    letterItem.visibility = 'visible';\n                    /** Set animation and custom classes */\n                    letterItem.animateClass = ` animated ${options.animation.name}`;\n                    /** Update the array */\n                    this.text.next(textArr);\n                  });\n              });\n          });\n      });\n  }\n\n  wordsJob(textArr, options: TeximateOptions): Observable<any> {\n\n    return Observable.from(textArr)\n      .mergeMap((line: any, i) => {\n\n        return Observable.of(line.words)\n          .mergeAll()\n          .mergeMap((wordItem: Word, j) => {\n\n            /** Process word (calculate index & delay according to word's type)\n             *  in this case `options.letter.delay` must be 0 */\n            const word = Helper.processWord(options, line.words, j, 0);\n\n            return Observable.of(word)\n              .delay(word.delay)\n              .do(() => {\n\n                /** Apply changes to the letter then update the view */\n                wordItem.visibility = 'visible';\n                /** Set animation and custom classes */\n                wordItem.animateClass = ` animated ${options.animation.name}`;\n                /** Update the array */\n                this.text.next(textArr);\n              })\n          });\n      });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}